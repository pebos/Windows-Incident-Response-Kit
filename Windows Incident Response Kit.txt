# Prompts user for the drive letter to saves the input
do {
    $driveLetter = Read-Host "Enter the drive letter where you want to save the outputs (e.g., 'E:')"
    $driveExists = Test-Path -Path "${driveLetter}:\"
    if (-not $driveExists) {
        Write-Host "Specified drive $driveLetter does not exist. Please enter a valid drive letter."
    }
} until ($driveExists)

# Grabs ARP table and savess it to a file
arp -a > "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_arp_table.txt"

# Grabs TCP connections and saves them to a file
Get-NetTCPConnection | Format-Table -Wrap -AutoSize > "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_tcp_connections.txt"

# Grabs TCP settings and saves them to a file
Get-NetTCPSetting > "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_tcp_settings.txt"

# Grabs running processes and saves them to a file
Get-Process | Format-Table -Wrap -AutoSize > "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_running_processes.txt"

# Iterates over each process and saves to a file
foreach ($process in Get-Process) {
    # Output process ID and name to file
    "$('Process ID: ' + $process.Id), Name: $($process.Name)" | Out-File -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_open_directories_files_by_program.txt" -Append

    try {
        # Get file handles for the process
        $handles = $process | Select-Object -ExpandProperty Handles | Where-Object { $_.TypeName -eq "File" }
        if ($handles) {
            # Output handles to file
            foreach ($handle in $handles) {
                "$('    Handle: ' + $handle.Handle + ' - ' + $handle.Object)" | Out-File -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_open_directories_files_by_program.txt" -Append
            }
        } else {
            "    No file handles found." | Out-File -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_open_directories_files_by_program.txt" -Append
        }
    } catch {
        "    Error occurred while retrieving handles." | Out-File -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_open_directories_files_by_program.txt" -Append
    }

    "" | Format-Table -AutoSize | Out-File -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_open_directories_files_by_program.txt" -Append
}

# Grabs recent Windows Application events and saves them to a file
# To modify a limit simply add "-MaxEvents (Limit)" after "Application"
Get-WinEvent -LogName Application -MaxEvents 1000 | Where-Object { $_.TimeCreated -ge (Get-Date).AddHours(-24) } | Format-Table -Wrap -AutoSize | Out-File -Append -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_application_event_log.txt"

# Grabs recent Windows System events and saves them to a file
# To modify a limit simply add "-MaxEvents (Limit)" after "System"
Get-WinEvent -LogName System -MaxEvents 1000 | Where-Object { $_.TimeCreated -ge (Get-Date).AddHours(-24) } | Format-Table -Wrap -AutoSize | Out-File -Append -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_system_event_log.txt"

# Grabs recent Windows Security events and saves them to a file
# To modify a limit simply add "-MaxEvents (Limit)" after "System"
Get-WinEvent -LogName Security -MaxEvents 1000 | Where-Object { $_.TimeCreated -ge (Get-Date).AddHours(-24) } | Format-Table -Wrap -AutoSize | Out-File -Append -FilePath "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_security_event_log.txt"

# Grabs modified files in the last 24 hours and save them to a file
Get-ChildItem -Path . -Recurse | Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays(-1) } | Format-Table -Wrap -AutoSize | Out-File -Append "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_modified_files.txt"

# Grabs startup applications and saves them to a file
Get-CimInstance -ClassName Win32_StartupCommand | Select-Object -Property Command, Description, User, Location | Format-List | Out-File -Append "${driveLetter}:\$(Get-Date -Format 'yyyy-MM-dd_hh-mm')_startup_apps.txt"

# Grabs local users and saves them to a file
Get-LocalUser > "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_local_users.txt"

# Grabs Active Directory users and saves them to a file
Get-ADUser -Filter * -Properties Description, Enabled | Select-Object Name, Description, Enabled| Out-File -Append "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_ad_users.txt"

# Grabs installed software and saves it to a file
Get-ChildItem "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall" | ForEach-Object {
    $displayName = $_.GetValue('DisplayName')
    $displayVersion = $_.GetValue('DisplayVersion')
    if ($displayName -ne $null -and $displayVersion -ne $null) {
        "$displayName $displayVersion" | Out-File -FilePath "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_installed_software.txt" -Append
    }
}

# Grabs Windows Defender status and saves it to a file
Get-MpComputerStatus | Out-File -Append "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_defender_status.txt"

# Grabs current threats and and saves it to a file
get-mpthreat | Out-File -Append "${driveLetter}:\$(Get-Date -f yyyy-MM-dd_hh-mm)_current_threats.txt"
